package codigo;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}
:};

terminal Linea, Comillas, T_dato, Int, Cadena, If, Else, Do, While, For,
    Igual, Suma, Resta, Multiplicacion, Division, Op_logico, Op_relacional,
    Op_atribucion, Op_incremento, Op_booleano, Parentesis_a, Parentesis_c,
    Llave_a, Llave_c, Corchete_a, Corchete_c, Main, P_coma, Identificador,
    Numero, ERROR, Op_diferencia, Potencia;
non terminal INICIO, SENTENCIA, DECLARACION, DECLARACION_FOR, IF, IF_ELSE,
    WHILE, DO_WHILE, FOR, SENTENCIA_BOOLEANA, SENTENCIA_FOR, VALBOOL, ARREGLOE,
    VARIABLES, EXPRESION, VAR, FUNCION_E, ASIGNACION;

start with INICIO;

INICIO ::= 
    Int Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c |
    Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c
;
SENTENCIA ::= 
    SENTENCIA DECLARACION |
    DECLARACION |
    SENTENCIA IF | 
    IF |
    SENTENCIA IF_ELSE |
    IF_ELSE |
    SENTENCIA WHILE |
    WHILE |
    SENTENCIA DO_WHILE
    DO_WHILE |
    SENTENCIA FOR |
    FOR |
    SENTENCIA FUNCION_E |
    FUNCION_E |
    SENTENCIA ASIGNACION |
    ASIGNACION
;

FUNCION_E ::=
    Identificador Parentesis_a Parentesis_c |
    Identificador Parentesis_a VARIABLES Parentesis_c
;

DECLARACION ::= 
    Int Identificador P_coma | 
    Int Identificador Op_atribucion Numero P_coma |
    Int Identificador Igual Numero P_coma |
    Int Identificador Op_incremento P_coma | 
    Int Op_incremento Identificador P_coma | 
    T_dato Identificador P_coma | 
    T_dato Identificador Op_atribucion Numero P_coma |
    T_dato Identificador Igual Numero P_coma |
    T_dato Identificador Op_incremento P_coma | 
    T_dato Op_incremento Identificador P_coma | 
    Cadena Identificador Op_atribucion Comillas Comillas P_coma |
    Cadena Identificador Igual Comillas Comillas P_coma |
    Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma |
    Cadena Identificador Igual Comillas Identificador Comillas P_coma |
    T_dato Identificador Corchete_a Numero Corchete_c P_coma |
    T_dato Identificador Corchete_a Corchete_c P_coma |
    T_dato Identificador Corchete_a Numero Corchete_c Igual ARREGLOE P_coma |
    T_dato Identificador Corchete_a Corchete_c Igual ARREGLOE P_coma |
    Int Identificador Corchete_a Numero Corchete_c P_coma |
    Int Identificador Corchete_a Corchete_c P_coma |
    Int Identificador Corchete_a Numero Corchete_c Igual ARREGLOE P_coma |
    Int Identificador Corchete_a Corchete_c Igual ARREGLOE P_coma |
    Int Identificador Igual EXPRESION P_coma |
    T_dato Identificador Igual EXPRESION P_coma
;

ASIGNACION ::=  
    Identificador Op_atribucion Numero P_coma |
    Identificador Igual Numero P_coma |
    Identificador Op_incremento P_coma | 
    Op_incremento Identificador P_coma |
    Identificador Op_atribucion Comillas Comillas P_coma |
    Identificador Igual Comillas Comillas P_coma |
    Identificador Op_atribucion Comillas Identificador Comillas P_coma |
    Identificador Igual Comillas Identificador Comillas P_coma |
    Identificador Corchete_a Numero Corchete_c Igual ARREGLOE P_coma |
    Identificador Corchete_a Corchete_c Igual ARREGLOE P_coma |
    Identificador Igual EXPRESION P_coma 
;

EXPRESION ::=
    EXPRESION Suma VAR |
    EXPRESION Resta VAR |
    EXPRESION Multiplicacion VAR |
    EXPRESION Division VAR |
    EXPRESION Potencia VAR |
    VAR Suma VAR |
    VAR Resta VAR |
    VAR Multiplicacion VAR |
    VAR Division VAR |
    VAR Potencia VAR 
;

VAR ::= 
    Numero |
    Identificador |
    FUNCION_E |
    Parentesis_a EXPRESION Parentesis_c |
    Parentesis_a VAR Parentesis_c
;

ARREGLOE ::= Llave_a VARIABLES Llave_c
;

VARIABLES ::= VALBOOL |
    VARIABLES VALBOOL
;

IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c
;
SENTENCIA_BOOLEANA ::= 
    Op_booleano |
    Op_booleano Op_diferencia |
    Identificador Op_diferencia |
    VALBOOL Op_relacional VALBOOL |
    SENTENCIA_BOOLEANA Op_logico VALBOOL |
    SENTENCIA_BOOLEANA Op_logico VALBOOL Op_relacional VALBOOL
;
VALBOOL ::=
    Op_booleano |
    Numero |
    Identificador |
    Comillas Comillas |
    Comillas Identificador Comillas
;
IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c
;
WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c
;
DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma
;
FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c
;
SENTENCIA_FOR ::=
    T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR |
    Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR
;
DECLARACION_FOR ::= 
    Identificador Op_atribucion Numero |
    Identificador Op_incremento | 
    Op_incremento Identificador
;