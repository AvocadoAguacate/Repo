package codigo;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}
:};

terminal Linea, Comillas, T_dato, Int, Float, Bool, Cadena, If, Else, Do, While, For,
    Igual, Suma, Resta, Multiplicacion, Division, Op_logico, Op_cantidad,
    Op_igualdad, Op_atribucion, Op_incremento, Op_booleano, Parentesis_a,
    Parentesis_c, Llave_a, Llave_c, Corchete_a, Corchete_c, Main, P_coma, Identificador,
    Numero, ERROR, Op_diferencia, Potencia, Elif, Return, Break, Op_pregunta, 
    Op_Sino, Read, Write, Fun, Flotante;
non terminal INICIO, SENTENCIA, DECLARACION, DECLARACION_FOR, IF, IF_ELSE,
    WHILE, DO_WHILE, FOR, SENTENCIA_BOOLEANA, SENTENCIA_FOR, ARREGLOE,
    VARIABLES, EXPRESION, VAR, FUNCION_E, ASIGNACION, IF_ELIF_ELSE, ELIF, 
    IFARIT, WRITE, FUNCION_D, FUNVARS, FUNVAR, FUNCIONES, DECLARACION_BOOL,
    VALBOOLCANTIDAD, VALBOOLIGUALDAD, VALBOOLLOGICO, DECLARACION_FLOTANTE,
    EXPRESION_FLOTANTE, VAR_FLOTANTE;

start with INICIO;

INICIO ::= 
    Int Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c |
    Int Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c FUNCIONES
;
SENTENCIA ::= 
    SENTENCIA DECLARACION |
    DECLARACION |
    SENTENCIA IF | 
    IF |
    SENTENCIA IF_ELSE |
    IF_ELSE |
    SENTENCIA WHILE |
    WHILE |
    SENTENCIA DO_WHILE
    DO_WHILE |
    SENTENCIA FOR |
    FOR |
    SENTENCIA FUNCION_E |
    FUNCION_E |
    SENTENCIA ASIGNACION |
    ASIGNACION |
    SENTENCIA IF_ELIF_ELSE |
    IF_ELIF_ELSE |
    SENTENCIA Break P_coma |
    Break P_coma |
    SENTENCIA Return VALBOOLIGUALDAD P_coma |
    Return VALBOOLIGUALDAD P_coma |
    SENTENCIA WRITE |
    WRITE |
    SENTENCIA FUNCION_D |
    FUNCION_D
;

FUNCION_E ::=
    Identificador Parentesis_a Parentesis_c |
    Identificador Parentesis_a VARIABLES Parentesis_c
;

FUNCION_D ::= 
    Fun Parentesis_a Identificador Int Parentesis_c Llave_a SENTENCIA Llave_c |
    Fun Parentesis_a Identificador T_dato Parentesis_c Llave_a SENTENCIA Llave_c |
    Fun Parentesis_a Identificador Int FUNVARS Parentesis_c Llave_a SENTENCIA Llave_c |
    Fun Parentesis_a Identificador T_dato FUNVARS Parentesis_c Llave_a SENTENCIA Llave_c
;

FUNVAR ::=
    Int Identificador |
    T_dato Identificador
;

FUNVARS ::=
    FUNVARS FUNVAR |
    FUNVAR
;

FUNCIONES ::=
    FUNCIONES FUNCION_D |
    FUNCION_D
;

DECLARACION_BOOL ::=
    Bool Identificador P_coma |
    Bool Identificador Igual SENTENCIA_BOOLEANA P_coma |
    Bool Identificador Igual Identificador P_coma
;

DECLARACION_FLOTANTE ::=
    Float Identificador P_coma |
    Float Identificador Igual EXPRESION_FLOTANTE P_coma
;

//Hay que revisar que IFRIT devuelva un flotante
EXPRESION_FLOTANTE ::=
    EXPRESION_FLOTANTE Suma VAR_FLOTANTE |
    EXPRESION_FLOTANTE Resta VAR_FLOTANTE   |
    EXPRESION_FLOTANTE Multiplicacion VAR_FLOTANTE |
    EXPRESION_FLOTANTE Division VAR_FLOTANTE |
    EXPRESION_FLOTANTE Potencia  VAR_FLOTANTE |
    VAR_FLOTANTE 
;

//Hay que revisar que VAR devuelvan un flotante con la tabla de simbolos
VAR_FLOTANTE ::=
    Flotante |
    Identificador |
    IFARIT |
    Parentesis_a EXPRESION_FLOTANTE Parentesis_c 
;

DECLARACION ::= 
    Int Identificador P_coma | 
    Int Identificador Op_atribucion Numero P_coma |
    Int Identificador Igual Numero P_coma |
    Int Identificador Op_incremento P_coma | 
    Int Op_incremento Identificador P_coma | 
    T_dato Identificador P_coma | 
    T_dato Identificador Op_atribucion Numero P_coma |
    T_dato Identificador Igual Numero P_coma |
    T_dato Identificador Op_incremento P_coma | 
    T_dato Op_incremento Identificador P_coma | 
    Cadena Identificador Op_atribucion Comillas Comillas P_coma |
    Cadena Identificador Igual Comillas Comillas P_coma |
    Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma |
    Cadena Identificador Igual Comillas Identificador Comillas P_coma |
    T_dato Identificador Corchete_a Numero Corchete_c P_coma |
    T_dato Identificador Corchete_a Corchete_c P_coma |
    T_dato Identificador Corchete_a Numero Corchete_c Igual ARREGLOE P_coma |
    T_dato Identificador Corchete_a Corchete_c Igual ARREGLOE P_coma |
    Int Identificador Corchete_a Numero Corchete_c P_coma |
    Int Identificador Corchete_a Corchete_c P_coma |
    Int Identificador Corchete_a Numero Corchete_c Igual ARREGLOE P_coma |
    Int Identificador Corchete_a Corchete_c Igual ARREGLOE P_coma |
    Int Identificador Igual EXPRESION P_coma |
    T_dato Identificador Igual EXPRESION P_coma |
    Int Identificador Igual FUNCION_E P_coma |
    T_dato Identificador Igual FUNCION_E P_coma |
    T_dato Identificador Igual Identificador |
    Int Identificador Igual Identificador |
    DECLARACION_BOOL |
    DECLARACION_FLOTANTE
;

ASIGNACION ::=  
    Identificador Op_atribucion Numero P_coma |
    Identificador Igual Numero P_coma |
    Identificador Op_incremento P_coma | 
    Op_incremento Identificador P_coma |
    Identificador Op_atribucion Comillas Comillas P_coma |
    Identificador Igual Comillas Comillas P_coma |
    Identificador Op_atribucion Comillas Identificador Comillas P_coma |
    Identificador Igual Comillas Identificador Comillas P_coma |
    Identificador Corchete_a Numero Corchete_c Igual ARREGLOE P_coma |
    Identificador Corchete_a Corchete_c Igual ARREGLOE P_coma |
    Identificador Igual EXPRESION P_coma |
    Identificador Igual Read Parentesis_a Parentesis_c P_coma |
    Identificador Igual FUNCION_E P_coma |
    Identificador Igual Identificador P_coma
;
//cambiar de lado expresion
EXPRESION ::=
    EXPRESION Suma VAR |
    EXPRESION Resta VAR |
    EXPRESION Multiplicacion VAR |
    EXPRESION Division VAR |
    EXPRESION Potencia VAR |
    VAR Suma VAR |
    VAR Resta VAR |
    VAR Multiplicacion VAR |
    VAR Division VAR |
    VAR Potencia VAR |
    IFARIT
;

VAR ::= 
    Identificador |
    FUNCION_E 
;

ARREGLOE ::= Llave_a VARIABLES Llave_c
;
//hay que validar variables iguales en los arreglos
VARIABLES ::= VALBOOLIGUALDAD |
    VARIABLES VALBOOLIGUALDAD
;

IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c
;

IFARIT ::= 
    Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Op_pregunta VAR Op_Sino VAR
;

WRITE ::=
    Write Parentesis_a VAR Parentesis_c P_coma |
    Write Parentesis_a EXPRESION Parentesis_c P_coma
;

//identificador solitario no quiere agregarse, está en declaración boleana
SENTENCIA_BOOLEANA ::= 
    Op_booleano |
    VALBOOLLOGICO Op_diferencia |
    Identificador Op_diferencia |
    VALBOOLCANTIDAD Op_cantidad VALBOOLCANTIDAD |
    VALBOOLIGUALDAD Op_igualdad VALBOOLIGUALDAD |
    SENTENCIA_BOOLEANA Op_logico Op_booleano |
    SENTENCIA_BOOLEANA Op_logico Identificador |
    SENTENCIA_BOOLEANA Op_logico VALBOOLCANTIDAD Op_cantidad VALBOOLCANTIDAD |
    SENTENCIA_BOOLEANA Op_logico VALBOOLIGUALDAD Op_igualdad VALBOOLIGUALDAD
;
VALBOOLCANTIDAD ::=
    Numero |
    Identificador 
;

VALBOOLIGUALDAD::=
    Numero |
    Identificador |
    Op_booleano
;

IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c
;

ELIF ::=
    Elif Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c |
    ELIF Elif Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c
;

IF_ELIF_ELSE ::= 
    IF ELIF |
    IF ELIF Else Llave_a SENTENCIA Llave_c
;
WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c
;
DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma
;
FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c
;
SENTENCIA_FOR ::=
    T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR |
    Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR
;
DECLARACION_FOR ::= 
    Identificador Op_atribucion Numero |
    Identificador Op_incremento | 
    Op_incremento Identificador
;