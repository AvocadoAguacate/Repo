package codigo;

import java_cup.runtime.*;
import codigo.Semantico.*;

action code
{:
    public TablaSimbolos tabla = new TablaSimbolos();
:}

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}
:};

terminal Linea, Comillas, Int, Float, Bool, Cadena, If, Else, For,
    Igual, Suma, Resta, Multiplicacion, Division, Op_logico, Op_cantidad,
    Op_igualdad, Op_atribucion, Op_incremento, Op_booleano, Parentesis_a,
    Parentesis_c, Llave_a, Llave_c, Corchete_a, Corchete_c, Main, P_coma, Identificador,
    Numero, ERROR, Op_diferencia, Potencia, Elif, Return, Break, Op_pregunta, 
    Op_Sino, Read, Write, Fun, Flotante, Nulo, Caracter, Char;
non terminal INICIO, DECLARACION, DECLARACION_FOR, IF, FOR_RETURN_ENTERA,
    IF_ELSE, FOR, SENTENCIA_BOOLEANA, SENTENCIA_FOR, VARIABLES, BLOQUE_RETURN_ENTERA,
    EXPRESION_ENTERA, FUNCION_E, ASIGNACION, IF_ELIF_ELSE, DECLARACION_CHAR,
    ELIF, WRITE, FUNCION_D, FUNCIONES, DECLARACION_BOOL, VAR_CHAR, BLOQUE_SIN_RETURN, 
    VALBOOLCANTIDAD, VALBOOLIGUALDAD, VALBOOLLOGICO, DECLARACION_FLOTANTE,
    EXPRESION_FLOTANTE, VAR_FLOTANTE, VAR_ENTERA, DECLARACION_ENTERA, BREAK, 
    ASIGNACION_ENTERA, ASIGNACION_FLOTANTE, ASIGNACION_STRING, DECLARACION_STRING,
    IFARIT_BOOL, IFARIT_FLOTANTE, IFARIT_ENTERA, IFARIT_CADENA, CADENA, MAIN, 
    DECLARACION_ARREGLO_FLOTANTE, DECLARACION_ARREGLO_ENTERA, ELSE, ASIGNACION_CHAR, 
    ARREGLO_FLOTANTE, ARREGLO_ENTERA, VARIABLES_ENTERAS, VARIABLES_FLOTANTES,
    VARIABLES_BOOLEANAS, ARREGLO_BOOL, DECLARACION_ARREGLO_BOOL, ASIGNACION_BOOL,
    FUNCION_DECLARACION_CHAR, FUNCION_DECLARACION_FLOAT, FUNCION_DECLARACION_INT,
    RETURN_ENTERA, RETURN_FLOTANTE, FOR_RETURN_FLOTANTE, BLOQUE_RETURN_FLOTANTE, 
    FUNCION_DECLARACION_VARIABLES, BLOQUE_RETURN_FLOTANTE_A, RETURN_CARACTER,
    FUNCION_DECLARACION_VARIABLE, DECLARACION_ARREGLO_CHAR, ARREGLO_CHAR, 
    VARIABLES_CHAR, IF_ELIF_ELSE_RETURN_ENTERA, IF_RETURN_ENTERA, IF_ELSE_RETURN_ENTERA, 
    ELSE_RETURN_ENTERA, ELIF_RETURN_ENTERA, BLOQUE_RETURN_ENTERA_A, IF_RETURN_FLOTANTE,
    IF_ELIF_ELSE_RETURN_FLOTANTE, IF_ELSE_RETURN_FLOTANTE, ELIF_RETURN_FLOTANTE,
    ELSE_RETURN_FLOTANTE, BLOQUE_RETURN_CARACTER_A, IF_ELIF_ELSE_RETURN_CARACTER,
    FOR_RETURN_CARACTER, BLOQUE_RETURN_CARACTER, IF_RETURN_CARACTER, IF_ELSE_RETURN_CARACTER,
    ELIF_RETURN_CARACTER, ELSE_RETURN_CARACTER, IF_ELIF_ELSE_RETURN_FlOTANTE;

start with INICIO;

INICIO ::= 
      MAIN
    | FUNCIONES MAIN 
;

MAIN ::=
    Int Main Parentesis_a Parentesis_c Llave_a BLOQUE_RETURN_ENTERA Llave_c {: tabla.guardarBitacora(); :}
;

BREAK ::=
    Break P_coma
;

BLOQUE_RETURN_ENTERA_A ::= 
    BLOQUE_RETURN_ENTERA_A DECLARACION |
    DECLARACION |
    BLOQUE_RETURN_ENTERA_A FUNCION_E |
    FUNCION_E |
    BLOQUE_RETURN_ENTERA_A ASIGNACION |
    ASIGNACION |
    BLOQUE_RETURN_ENTERA_A WRITE |
    WRITE |
    BLOQUE_RETURN_ENTERA_A IF_ELIF_ELSE_RETURN_ENTERA |
    IF_ELIF_ELSE_RETURN_ENTERA |
    BLOQUE_RETURN_ENTERA_A FOR_RETURN_ENTERA |
    FOR_RETURN_ENTERA |
    BLOQUE_RETURN_ENTERA_A BREAK |
    BREAK |
    RETURN_ENTERA
;

BLOQUE_RETURN_ENTERA ::=
    BLOQUE_RETURN_ENTERA_A RETURN_ENTERA
;

BLOQUE_RETURN_FLOTANTE_A ::= 
    BLOQUE_RETURN_FLOTANTE_A DECLARACION |
    DECLARACION |
    BLOQUE_RETURN_FLOTANTE_A FUNCION_E |
    FUNCION_E |
    BLOQUE_RETURN_FLOTANTE_A ASIGNACION |
    ASIGNACION |
    BLOQUE_RETURN_FLOTANTE_A WRITE |
    WRITE |
    BLOQUE_RETURN_FLOTANTE_A IF_ELIF_ELSE_RETURN_FlOTANTE |
    IF_ELIF_ELSE_RETURN_FlOTANTE |
    BLOQUE_RETURN_FLOTANTE_A FOR_RETURN_FLOTANTE |
    FOR_RETURN_FLOTANTE |
    BLOQUE_RETURN_FLOTANTE_A BREAK |
    BREAK |
    RETURN_ENTERA
;

BLOQUE_RETURN_FLOTANTE ::=
    BLOQUE_RETURN_FLOTANTE_A RETURN_FLOTANTE
;

BLOQUE_RETURN_CARACTER_A ::= 
    BLOQUE_RETURN_CARACTER_A DECLARACION |
    DECLARACION |
    BLOQUE_RETURN_CARACTER_A FUNCION_E |
    FUNCION_E |
    BLOQUE_RETURN_CARACTER_A ASIGNACION |
    ASIGNACION |
    BLOQUE_RETURN_CARACTER_A WRITE |
    WRITE |
    BLOQUE_RETURN_CARACTER_A IF_ELIF_ELSE_RETURN_CARACTER |
    IF_ELIF_ELSE_RETURN_CARACTER |
    BLOQUE_RETURN_CARACTER_A FOR_RETURN_CARACTER |
    FOR_RETURN_CARACTER |
    BLOQUE_RETURN_CARACTER_A BREAK |
    BREAK |
    RETURN_CARACTER
;

BLOQUE_RETURN_CARACTER ::=
    BLOQUE_RETURN_CARACTER_A RETURN_CARACTER
;

FUNCION_E ::=
      Fun Identificador:id Parentesis_a Parentesis_c {: tabla.verificarFuncion(id.toString()); :}
    | Fun Identificador:id Parentesis_a VARIABLES Parentesis_c {: tabla.verificarFuncion(id.toString()); :}
;

VARIABLES ::=
    Identificador |
    Numero |
    Flotante |
    CADENA |
    Caracter
;

FUNCION_D ::= 
    FUNCION_DECLARACION_CHAR |
    FUNCION_DECLARACION_FLOAT |
    FUNCION_DECLARACION_INT 
;

//falta revisar el return 
FUNCION_DECLARACION_INT ::= 
      Fun Parentesis_a Identificador:id Int Parentesis_c Llave_a BLOQUE_RETURN_ENTERA Llave_c {: tabla.addFuncion(id.toString(),Tipos.Int); :}
    | Fun Parentesis_a Identificador:id Int FUNCION_DECLARACION_VARIABLES Parentesis_c Llave_a BLOQUE_RETURN_ENTERA Llave_c {: tabla.addFuncion(id.toString(),Tipos.Int); :}
;

//falta revisar el return 
FUNCION_DECLARACION_FLOAT ::= 
      Fun Parentesis_a Identificador:id Float Parentesis_c Llave_a BLOQUE_RETURN_FLOTANTE Llave_c {: tabla.addFuncion(id.toString(),Tipos.Float); :}
    | Fun Parentesis_a Identificador:id Float FUNCION_DECLARACION_VARIABLES Parentesis_c Llave_a BLOQUE_RETURN_FLOTANTE Llave_c {: tabla.addFuncion(id.toString(),Tipos.Float); :}
;


//falta revisar el return 
FUNCION_DECLARACION_CHAR ::= 
      Fun Parentesis_a Identificador:id Char Parentesis_c Llave_a BLOQUE_RETURN_CARACTER Llave_c {: tabla.addFuncion(id.toString(),Tipos.Char); :}
    | Fun Parentesis_a Identificador:id Char FUNCION_DECLARACION_VARIABLES Parentesis_c Llave_a BLOQUE_RETURN_CARACTER Llave_c {: tabla.addFuncion(id.toString(),Tipos.Char); :}
;


FUNCION_DECLARACION_VARIABLES ::=
    FUNCION_DECLARACION_VARIABLES FUNCION_DECLARACION_VARIABLE |
    FUNCION_DECLARACION_VARIABLE
;

FUNCION_DECLARACION_VARIABLE ::=
      Int Identificador:id {: tabla.addParametro(id.toString(),Tipos.Int); :}
    | Float Identificador:id {: tabla.addParametro(id.toString(),Tipos.Float); :}
    | Bool Identificador:id  {: tabla.addParametro(id.toString(),Tipos.Bool); :}
    | Cadena Identificador:id {: tabla.addParametro(id.toString(),Tipos.String); :}
;

RETURN_ENTERA ::=
    Return VAR_ENTERA P_coma
;

//hay que revisar el identificador
RETURN_FLOTANTE ::=
    Return VAR_FLOTANTE P_coma|
    Return Identificador P_coma
;

RETURN_CARACTER ::=
    Return VAR_CHAR P_coma
;

FUNCIONES ::=
    FUNCIONES FUNCION_D |
    FUNCION_D {: tabla.setMain(); :}
;

DECLARACION_BOOL ::=
    Bool Identificador P_coma |
    Bool Identificador Igual SENTENCIA_BOOLEANA P_coma |
    Bool Identificador Igual Identificador P_coma 
    | Bool Identificador Igual Nulo P_coma 
    | DECLARACION_ARREGLO_BOOL 
;

DECLARACION_ARREGLO_BOOL ::=
      Bool Identificador Corchete_a Corchete_c P_coma
    | Bool Identificador Corchete_a Numero Corchete_c P_coma
    | Bool Identificador Corchete_a Corchete_c Igual ARREGLO_BOOL P_coma
    | Bool Identificador Corchete_a Numero Corchete_c Igual ARREGLO_BOOL P_coma
;

ARREGLO_BOOL ::= 
    Llave_a VARIABLES_BOOLEANAS Llave_c
;

//falta identificadores
VARIABLES_BOOLEANAS ::= 
    Op_booleano |
    VARIABLES_BOOLEANAS Op_booleano
;

//identificador solitario no quiere agregarse, está en declaración boleana
//valbooligualdad puede generar true == 3, se considera falso 
SENTENCIA_BOOLEANA ::= 
    Op_booleano |
    IFARIT_BOOL |
    VALBOOLLOGICO Op_diferencia |
    Identificador Op_diferencia |
    VALBOOLCANTIDAD Op_cantidad VALBOOLCANTIDAD |
    VALBOOLIGUALDAD Op_igualdad VALBOOLIGUALDAD |
    SENTENCIA_BOOLEANA Op_logico Op_booleano |
    SENTENCIA_BOOLEANA Op_logico Identificador |
    SENTENCIA_BOOLEANA Op_logico VALBOOLCANTIDAD Op_cantidad VALBOOLCANTIDAD |
    SENTENCIA_BOOLEANA Op_logico VALBOOLIGUALDAD Op_igualdad VALBOOLIGUALDAD
;
VALBOOLCANTIDAD ::=
    Numero |
    Identificador:id {: tabla.verificarVariable(id.toString(),Tipos.Int); :}
;

VALBOOLIGUALDAD::=
    Numero |
    Identificador |
    Op_booleano
;

DECLARACION_FLOTANTE ::=
    Float Identificador:id P_coma {: tabla.addVariable(id.toString(),Tipos.Float); :}
    | Float Identificador:id Igual EXPRESION_FLOTANTE P_coma {: tabla.addVariable(id.toString(),Tipos.Float); :}
    | Float Identificador:id Igual Nulo P_coma {: tabla.addVariable(id.toString(),Tipos.Float); :}
    | DECLARACION_ARREGLO_FLOTANTE 
;

DECLARACION_ARREGLO_FLOTANTE ::=
      Float Identificador:id Corchete_a Numero:num Corchete_c P_coma {: tabla.addArreglo(id.toString(),Tipos.Float,(int)num); :}
    | Float Identificador:id Corchete_a Numero:num Corchete_c Igual ARREGLO_FLOTANTE P_coma {: tabla.addArreglo(id.toString(),Tipos.Float,(int)num); :}
;

ARREGLO_FLOTANTE ::= 
    Llave_a VARIABLES_FLOTANTES Llave_c
;

VARIABLES_FLOTANTES ::= 
    VAR_FLOTANTE |
    VARIABLES_FLOTANTES VAR_FLOTANTE
;


//Hay que revisar que IFRIT devuelva un flotante
EXPRESION_FLOTANTE ::=
    EXPRESION_FLOTANTE Suma VAR_FLOTANTE |
    EXPRESION_FLOTANTE Resta VAR_FLOTANTE   |
    EXPRESION_FLOTANTE Multiplicacion VAR_FLOTANTE |
    EXPRESION_FLOTANTE Division VAR_FLOTANTE |
    EXPRESION_FLOTANTE Potencia  VAR_FLOTANTE |
    VAR_FLOTANTE 
;

//Identificador causa conflicto, ni idea porque
//Falta Identificador 
VAR_FLOTANTE ::=
    Flotante
    | IFARIT_FLOTANTE 
    | Parentesis_a EXPRESION_FLOTANTE Parentesis_c 
;

//Hay que revisar los arreglos
DECLARACION_ENTERA ::=
      Int Identificador:id P_coma {: tabla.addVariable(id.toString(),Tipos.Int);:}
    | Int Identificador:id Igual EXPRESION_ENTERA P_coma {: tabla.addVariable(id.toString(),Tipos.Int);:}
    | Int Identificador:id Igual Nulo P_coma {: tabla.addVariable(id.toString(),Tipos.Int);:}
    | DECLARACION_ARREGLO_ENTERA 
;

DECLARACION_ARREGLO_ENTERA ::=
      Int Identificador:id Corchete_a Numero:num Corchete_c P_coma {: tabla.addArreglo(id.toString(),Tipos.Int,(int)num); :}
    | Int Identificador:id Corchete_a Numero:num Corchete_c Igual ARREGLO_ENTERA P_coma {: tabla.addArreglo(id.toString(),Tipos.Int,(int)num); :}
;

ARREGLO_ENTERA ::= 
    Llave_a VARIABLES_ENTERAS Llave_c
;

VARIABLES_ENTERAS ::= 
    VAR_ENTERA |
    VARIABLES_ENTERAS VAR_ENTERA
;

DECLARACION_CHAR ::=
      Char Identificador:id P_coma {: tabla.addVariable(id.toString(),Tipos.Char); :}
    | Char Identificador:id Igual Caracter P_coma {: tabla.addVariable(id.toString(),Tipos.Char); :}
    | DECLARACION_ARREGLO_CHAR
;

DECLARACION_ARREGLO_CHAR ::=
      Char Identificador:id Corchete_a Numero:num Corchete_c P_coma {: tabla.addArreglo(id.toString(),Tipos.Char,(int)num); :}
    | Char Identificador:id Corchete_a Numero:num Corchete_c Igual ARREGLO_CHAR P_coma {: tabla.addArreglo(id.toString(),Tipos.Char,(int)num); :}
;

ARREGLO_CHAR ::=
    Llave_a VARIABLES_CHAR Llave_c
;

//Revisar si el identificador es Char
VARIABLES_CHAR ::=
    VAR_CHAR |
    VARIABLES_CHAR VAR_CHAR
;

//falta Id
VAR_CHAR ::=
    Caracter
;

EXPRESION_ENTERA ::=
    EXPRESION_ENTERA Suma VAR_ENTERA |
    EXPRESION_ENTERA Resta VAR_ENTERA |
    EXPRESION_ENTERA Multiplicacion VAR_ENTERA |
    EXPRESION_ENTERA Division VAR_ENTERA |
    EXPRESION_ENTERA Potencia VAR_ENTERA |
    VAR_ENTERA
;

//Hay que revisar la cantidad de parametros
// id++ exclusivo para identificadores 
VAR_ENTERA ::= 
      Identificador:id {: tabla.verificarVariable(id.toString(),Tipos.Int); :}
    | Fun Identificador:id Parentesis_a Parentesis_c {: tabla.verificarFuncion(id.toString(),Tipos.Int); :}
    | Fun Identificador:id Parentesis_a VARIABLES Parentesis_c  {: tabla.verificarFuncion(id.toString(),Tipos.Int); :}
    | IFARIT_ENTERA
    | Numero
    | Identificador:id Op_incremento {: tabla.verificarVariable(id.toString(),Tipos.Int); :}
;

DECLARACION_STRING ::=
      Cadena Identificador:id P_coma {: tabla.addVariable(id.toString(),Tipos.String); :}
    | Cadena Identificador:id Igual CADENA P_coma {: tabla.addVariable(id.toString(),Tipos.String); :}
    | Cadena Identificador:id Igual Nulo P_coma {: tabla.addVariable(id.toString(),Tipos.String); :}
;

CADENA ::=
      Comillas Comillas 
    | Comillas Identificador Comillas
    | IFARIT_CADENA
;

DECLARACION ::=
    DECLARACION_BOOL |
    DECLARACION_FLOTANTE |
    DECLARACION_ENTERA |
    DECLARACION_STRING |
    DECLARACION_CHAR
;

//READ se encuentra en String
ASIGNACION ::= 
    Op_incremento Identificador P_coma |
    ASIGNACION_ENTERA |
    ASIGNACION_FLOTANTE |
    ASIGNACION_STRING |
    ASIGNACION_BOOL |
    ASIGNACION_CHAR |
    Identificador Igual Nulo P_coma |
    Identificador Corchete_a Numero Corchete_c Igual Nulo P_coma
;

ASIGNACION_BOOL ::=
    Identificador:id Igual SENTENCIA_BOOLEANA P_coma {: tabla.verificarVariable(id.toString(),Tipos.Bool); :}
    | Identificador:id Corchete_a Numero:num Corchete_c Igual SENTENCIA_BOOLEANA P_coma {: tabla.verificarArreglo(id.toString(),Tipos.Bool,(int)num); :}
;

ASIGNACION_ENTERA ::=
    Identificador:id Igual EXPRESION_ENTERA P_coma {: tabla.verificarVariable(id.toString(),Tipos.Int); :}
    | Identificador:id Corchete_a Numero:num Corchete_c Igual EXPRESION_ENTERA P_coma {: tabla.verificarArreglo(id.toString(),Tipos.Int,(int)num); :}
;

ASIGNACION_FLOTANTE ::=
    Identificador:id Igual EXPRESION_FLOTANTE P_coma {: tabla.verificarVariable(id.toString(),Tipos.Float); :}
    | Identificador:id Corchete_a Numero:num Corchete_c Igual EXPRESION_FLOTANTE P_coma {: tabla.verificarArreglo(id.toString(),Tipos.Float,(int)num); :}
;

ASIGNACION_STRING ::=
      Identificador:id Igual CADENA P_coma {::} {: tabla.verificarVariable(id.toString(),Tipos.String); :}
    | Identificador:id Igual Read Parentesis_a Parentesis_c P_coma {: tabla.verificarVariable(id.toString(),Tipos.String); :}
;

ASIGNACION_CHAR ::=
      Identificador:id Igual VAR_CHAR P_coma {: tabla.verificarVariable(id.toString(),Tipos.Char); :}
    | Identificador:id Corchete_a Numero:num Corchete_c Igual VAR_CHAR P_coma {: tabla.verificarArreglo(id.toString(),Tipos.Char,(int)num); :}
;

IFARIT_FLOTANTE ::= 
    Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Op_pregunta VAR_FLOTANTE Op_Sino VAR_FLOTANTE
;

IFARIT_ENTERA ::= 
    Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Op_pregunta VAR_ENTERA Op_Sino VAR_ENTERA
;

IFARIT_CADENA ::= 
    Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Op_pregunta CADENA Op_Sino CADENA
;

IFARIT_BOOL ::= 
    Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Op_pregunta Op_booleano Op_Sino Op_booleano 
;

WRITE ::=
    Write Parentesis_a CADENA Parentesis_c P_coma |
    Write Parentesis_a Identificador Parentesis_c P_coma 
;

IF ::= 
    If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a BLOQUE_SIN_RETURN Llave_c
;

IF_ELSE ::= 
    IF ELSE
;

ELIF ::=
    Elif Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a BLOQUE_SIN_RETURN Llave_c |
    ELIF Elif Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a BLOQUE_SIN_RETURN Llave_c
;

ELSE ::=
    Else Llave_a BLOQUE_SIN_RETURN Llave_c
;

IF_ELIF_ELSE ::=
    IF |
    IF_ELSE |
    IF ELIF |
    IF ELIF ELSE
;

IF_RETURN_ENTERA ::= 
    If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a BLOQUE_RETURN_ENTERA_A Llave_c |
    IF
;

IF_ELSE_RETURN_ENTERA ::= 
    IF_RETURN_ENTERA ELSE_RETURN_ENTERA
;

ELIF_RETURN_ENTERA ::=
    Elif Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a BLOQUE_RETURN_ENTERA_A Llave_c |
    ELIF Elif Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a BLOQUE_RETURN_ENTERA_A Llave_c |
    ELIF
;

ELSE_RETURN_ENTERA ::=
    Else Llave_a BLOQUE_RETURN_ENTERA_A Llave_c |
    ELSE
;

IF_ELIF_ELSE_RETURN_ENTERA ::=
    IF_RETURN_ENTERA |
    IF_ELSE_RETURN_ENTERA |
    IF_RETURN_ENTERA ELIF_RETURN_ENTERA |
    IF_RETURN_ENTERA ELIF_RETURN_ENTERA ELSE_RETURN_ENTERA
;

IF_RETURN_FLOTANTE ::= 
    If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a BLOQUE_RETURN_FLOTANTE_A Llave_c |
    IF
;

IF_ELSE_RETURN_FLOTANTE ::= 
    IF_RETURN_FLOTANTE ELSE_RETURN_FLOTANTE
;

ELIF_RETURN_FLOTANTE ::=
    Elif Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a BLOQUE_RETURN_FLOTANTE_A Llave_c |
    ELIF Elif Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a BLOQUE_RETURN_FLOTANTE_A Llave_c |
    ELIF
;

ELSE_RETURN_FLOTANTE ::=
    Else Llave_a BLOQUE_RETURN_FLOTANTE_A Llave_c |
    ELSE
;

IF_ELIF_ELSE_RETURN_FLOTANTE ::=
    IF_RETURN_FLOTANTE |
    IF_ELSE_RETURN_FLOTANTE |
    IF_RETURN_FLOTANTE ELIF_RETURN_FLOTANTE |
    IF_RETURN_FLOTANTE ELIF_RETURN_FLOTANTE ELSE_RETURN_FLOTANTE
;

IF_RETURN_CARACTER ::= 
    If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a BLOQUE_RETURN_CARACTER_A Llave_c |
    IF
;

IF_ELSE_RETURN_CARACTER ::= 
    IF_RETURN_CARACTER ELSE_RETURN_CARACTER
;

ELIF_RETURN_CARACTER ::=
    Elif Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a BLOQUE_RETURN_CARACTER_A Llave_c |
    ELIF Elif Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a BLOQUE_RETURN_CARACTER_A Llave_c |
    ELIF
;

ELSE_RETURN_CARACTER ::=
    Else Llave_a BLOQUE_RETURN_CARACTER_A Llave_c |
    ELSE
;

IF_ELIF_ELSE_RETURN_CARACTER ::=
    IF_RETURN_CARACTER |
    IF_ELSE_RETURN_CARACTER |
    IF_RETURN_CARACTER ELIF_RETURN_CARACTER |
    IF_RETURN_CARACTER ELIF_RETURN_CARACTER ELSE_RETURN_CARACTER
;

FOR ::= 
    For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a BLOQUE_SIN_RETURN Llave_c
;

FOR_RETURN_ENTERA ::= 
    For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a BLOQUE_RETURN_ENTERA_A Llave_c |
    FOR
;

FOR_RETURN_FLOTANTE ::= 
    For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a BLOQUE_RETURN_FLOTANTE_A Llave_c |
    FOR
;

FOR_RETURN_CARACTER ::= 
    For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a BLOQUE_RETURN_CARACTER_A Llave_c |
    FOR
;

SENTENCIA_FOR ::=
    Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR
;
DECLARACION_FOR ::= 
    Identificador Op_atribucion Numero |
    Identificador Op_incremento | 
    Op_incremento Identificador
;