package codigo;

import java_cup.runtime.*;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}
:};

terminal Linea, Comillas, Int, Float, Bool, Cadena, If, Else, For,
    Igual, Suma, Resta, Multiplicacion, Division, Op_logico, Op_cantidad,
    Op_igualdad, Op_atribucion, Op_incremento, Op_booleano, Parentesis_a,
    Parentesis_c, Llave_a, Llave_c, Corchete_a, Corchete_c, Main, P_coma, Identificador,
    Numero, ERROR, Op_diferencia, Potencia, Elif, Return, Break, Op_pregunta, 
    Op_Sino, Read, Write, Fun, Flotante, Nulo, Caracter, Char;
non terminal INICIO, SENTENCIA, DECLARACION, DECLARACION_FOR, IF,
    IF_ELSE, FOR, SENTENCIA_BOOLEANA, SENTENCIA_FOR, VARIABLES, 
    EXPRESION_ENTERA, FUNCION_E, ASIGNACION, IF_ELIF_ELSE, DECLARACION_CHAR,
    ELIF, WRITE, FUNCION_D, FUNCIONES, DECLARACION_BOOL, VAR_CHAR, 
    VALBOOLCANTIDAD, VALBOOLIGUALDAD, VALBOOLLOGICO, DECLARACION_FLOTANTE,
    EXPRESION_FLOTANTE, VAR_FLOTANTE, VAR_ENTERA, DECLARACION_ENTERA, 
    ASIGNACION_ENTERA, ASIGNACION_FLOTANTE, ASIGNACION_STRING, DECLARACION_STRING,
    IFARIT_BOOL, IFARIT_FLOTANTE, IFARIT_ENTERA, IFARIT_CADENA, CADENA, 
    DECLARACION_ARREGLO_FLOTANTE, DECLARACION_ARREGLO_ENTERA, ELSE, ASIGNACION_CHAR, 
    ARREGLO_FLOTANTE, ARREGLO_ENTERA, VARIABLES_ENTERAS, VARIABLES_FLOTANTES,
    VARIABLES_BOOLEANAS, ARREGLO_BOOL, DECLARACION_ARREGLO_BOOL, ASIGNACION_BOOL,
    FUNCION_DECLARACION_CADENA, FUNCION_DECLARACION_FLOAT, FUNCION_DECLARACION_INT,
    RETURN_CADENA, RETURN_ENTERA, RETURN_FLOTANTE, BLOQUE_FUNCION_ENTERA,
    BLOQUE_FUNCION_FLOTANTE, BLOQUE_FUNCION_CADENA, FUNCION_DECLARACION_VARIABLES,
    FUNCION_DECLARACION_VARIABLE, DECLARACION_ARREGLO_CHAR, ARREGLO_CHAR, 
    VARIABLES_CHAR;

start with INICIO;

INICIO ::= 
      Int Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c
    | Int Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c FUNCIONES
;
SENTENCIA ::= 
    SENTENCIA DECLARACION |
    DECLARACION |
    SENTENCIA FOR |
    FOR |
    SENTENCIA FUNCION_E |
    FUNCION_E |
    SENTENCIA ASIGNACION |
    ASIGNACION |
    SENTENCIA IF_ELIF_ELSE |
    IF_ELIF_ELSE |
    SENTENCIA Break P_coma |
    Break P_coma |
    SENTENCIA WRITE |
    WRITE |
    SENTENCIA FUNCION_D |
    FUNCION_D
;

//hay que arreglar esto, hacer un sentecia con return en if/for
//Bloque funcion sirve para asegurar el tipo retornado en una funcion 
BLOQUE_FUNCION_ENTERA ::=
    SENTENCIA RETURN_ENTERA |
    RETURN_ENTERA SENTENCIA |
    RETURN_ENTERA
;

BLOQUE_FUNCION_FLOTANTE ::=
    SENTENCIA RETURN_FLOTANTE |
    RETURN_FLOTANTE SENTENCIA |
    RETURN_FLOTANTE
;

//Cambiar a Char
BLOQUE_FUNCION_CADENA ::=
    SENTENCIA RETURN_CADENA |
    RETURN_CADENA SENTENCIA |
    RETURN_CADENA
;

FUNCION_E ::=
    Fun Identificador Parentesis_a Parentesis_c |
    Fun Identificador Parentesis_a VARIABLES Parentesis_c
;

VARIABLES ::=
    Identificador |
    Numero |
    Flotante |
    CADENA
;

FUNCION_D ::= 
    FUNCION_DECLARACION_CADENA |
    FUNCION_DECLARACION_FLOAT |
    FUNCION_DECLARACION_INT 
;

//falta revisar el return 
FUNCION_DECLARACION_INT ::= 
    Fun Parentesis_a Identificador Int Parentesis_c Llave_a BLOQUE_FUNCION_ENTERA Llave_c |
    Fun Parentesis_a Identificador Int FUNCION_DECLARACION_VARIABLES Parentesis_c Llave_a BLOQUE_FUNCION_ENTERA Llave_c 
;

//falta revisar el return 
FUNCION_DECLARACION_FLOAT ::= 
    Fun Parentesis_a Identificador Float Parentesis_c Llave_a BLOQUE_FUNCION_FLOTANTE Llave_c |
    Fun Parentesis_a Identificador Float FUNCION_DECLARACION_VARIABLES Parentesis_c Llave_a BLOQUE_FUNCION_FLOTANTE Llave_c 
;


//falta revisar el return 
FUNCION_DECLARACION_CADENA ::= 
    Fun Parentesis_a Identificador Cadena Parentesis_c Llave_a BLOQUE_FUNCION_CADENA Llave_c |
    Fun Parentesis_a Identificador Cadena FUNCION_DECLARACION_VARIABLES Parentesis_c Llave_a BLOQUE_FUNCION_CADENA Llave_c 
;


FUNCION_DECLARACION_VARIABLES ::=
    FUNCION_DECLARACION_VARIABLES FUNCION_DECLARACION_VARIABLE |
    FUNCION_DECLARACION_VARIABLE
;

FUNCION_DECLARACION_VARIABLE ::=
    Int Identificador |
    Float Identificador |
    Bool Identificador |
    Cadena Identificador
;

RETURN_ENTERA ::=
    Return VAR_ENTERA P_coma
;

//hay que revisar el identificador
RETURN_FLOTANTE ::=
    Return VAR_FLOTANTE P_coma|
    Return Identificador P_coma
;


//hay que revisar el identificador
RETURN_CADENA ::=
    Return CADENA P_coma |
    Return Identificador P_coma
;

FUNCIONES ::=
    FUNCIONES FUNCION_D |
    FUNCION_D
;

DECLARACION_BOOL ::=
    Bool Identificador P_coma |
    Bool Identificador Igual SENTENCIA_BOOLEANA P_coma |
    Bool Identificador Igual Identificador P_coma 
    | Bool Identificador Igual Nulo P_coma 
    | DECLARACION_ARREGLO_BOOL 
;

DECLARACION_ARREGLO_BOOL ::=
      Bool Identificador Corchete_a Corchete_c P_coma
    | Bool Identificador Corchete_a Numero Corchete_c P_coma
    | Bool Identificador Corchete_a Corchete_c Igual ARREGLO_BOOL P_coma
    | Bool Identificador Corchete_a Numero Corchete_c Igual ARREGLO_BOOL P_coma
;

ARREGLO_BOOL ::= 
    Llave_a VARIABLES_BOOLEANAS Llave_c
;

//falta identificadores
VARIABLES_BOOLEANAS ::= 
    Op_booleano |
    VARIABLES_BOOLEANAS Op_booleano
;

//identificador solitario no quiere agregarse, está en declaración boleana
SENTENCIA_BOOLEANA ::= 
    Op_booleano |
    IFARIT_BOOL |
    VALBOOLLOGICO Op_diferencia |
    Identificador Op_diferencia |
    VALBOOLCANTIDAD Op_cantidad VALBOOLCANTIDAD |
    VALBOOLIGUALDAD Op_igualdad VALBOOLIGUALDAD |
    SENTENCIA_BOOLEANA Op_logico Op_booleano |
    SENTENCIA_BOOLEANA Op_logico Identificador |
    SENTENCIA_BOOLEANA Op_logico VALBOOLCANTIDAD Op_cantidad VALBOOLCANTIDAD |
    SENTENCIA_BOOLEANA Op_logico VALBOOLIGUALDAD Op_igualdad VALBOOLIGUALDAD
;
VALBOOLCANTIDAD ::=
    Numero |
    Identificador 
;

VALBOOLIGUALDAD::=
    Numero |
    Identificador |
    Op_booleano
;

DECLARACION_FLOTANTE ::=
    Float Identificador P_coma
    | Float Identificador Igual EXPRESION_FLOTANTE P_coma
    | Float Identificador Igual Nulo P_coma
    | DECLARACION_ARREGLO_FLOTANTE 
;

DECLARACION_ARREGLO_FLOTANTE ::=
      Float Identificador Corchete_a Corchete_c P_coma
    | Float Identificador Corchete_a Numero Corchete_c P_coma
    | Float Identificador Corchete_a Corchete_c Igual ARREGLO_FLOTANTE P_coma
    | Float Identificador Corchete_a Numero Corchete_c Igual ARREGLO_FLOTANTE P_coma
;

ARREGLO_FLOTANTE ::= 
    Llave_a VARIABLES_FLOTANTES Llave_c
;

VARIABLES_FLOTANTES ::= 
    VAR_FLOTANTE |
    VARIABLES_FLOTANTES VAR_FLOTANTE
;


//Hay que revisar que IFRIT devuelva un flotante
EXPRESION_FLOTANTE ::=
    EXPRESION_FLOTANTE Suma VAR_FLOTANTE |
    EXPRESION_FLOTANTE Resta VAR_FLOTANTE   |
    EXPRESION_FLOTANTE Multiplicacion VAR_FLOTANTE |
    EXPRESION_FLOTANTE Division VAR_FLOTANTE |
    EXPRESION_FLOTANTE Potencia  VAR_FLOTANTE |
    VAR_FLOTANTE 
;

//Hay que revisar que VAR devuelvan un flotante con la tabla de simbolos
//Falta Identificador 
VAR_FLOTANTE ::=
    Flotante:flotante {:System.out.println(flotante):}
    | IFARIT_FLOTANTE 
    | Parentesis_a EXPRESION_FLOTANTE Parentesis_c 
;

DECLARACION_ENTERA ::=
      Int Identificador P_coma 
    | Int Identificador Igual EXPRESION_ENTERA P_coma
    | Int Identificador Igual Nulo P_coma
    | DECLARACION_ARREGLO_ENTERA 
;

DECLARACION_ARREGLO_ENTERA ::=
      Int Identificador Corchete_a Corchete_c P_coma
    | Int Identificador Corchete_a Numero Corchete_c P_coma
    | Int Identificador Corchete_a Corchete_c Igual ARREGLO_ENTERA P_coma
    | Int Identificador Corchete_a Numero Corchete_c Igual ARREGLO_ENTERA P_coma
;

ARREGLO_ENTERA ::= 
    Llave_a VARIABLES_ENTERAS Llave_c
;

VARIABLES_ENTERAS ::= 
    VAR_ENTERA |
    VARIABLES_ENTERAS VAR_ENTERA
;

DECLARACION_CHAR ::=
      Char Identificador P_coma
    | Char Identificador Igual Caracter P_coma
    | DECLARACION_ARREGLO_CHAR
;

DECLARACION_ARREGLO_CHAR ::=
      Char Identificador Corchete_a Corchete_c P_coma
    | Char Identificador Corchete_a Numero Corchete_c P_coma
    | Char Identificador Corchete_a Corchete_c Igual ARREGLO_CHAR P_coma
    | Char Identificador Corchete_a Numero Corchete_c Igual ARREGLO_CHAR P_coma
;

ARREGLO_CHAR ::=
    Llave_a VARIABLES_CHAR Llave_c
;

//Revisar si el identificador es Char
VARIABLES_CHAR ::=
    VAR_CHAR |
    VARIABLES_CHAR VAR_CHAR
;

//falta Id
VAR_CHAR ::=
      Caracter
;

EXPRESION_ENTERA ::=
    EXPRESION_ENTERA Suma VAR_ENTERA |
    EXPRESION_ENTERA Resta VAR_ENTERA |
    EXPRESION_ENTERA Multiplicacion VAR_ENTERA |
    EXPRESION_ENTERA Division VAR_ENTERA |
    EXPRESION_ENTERA Potencia VAR_ENTERA |
    VAR_ENTERA
;

//Hay que revisar que VAR devuelvan enteros con la tabla de simbolos
// id++ exclusivo para identificadores 
VAR_ENTERA ::= 
      Identificador 
    | FUNCION_E 
    | IFARIT_ENTERA
    | Numero
    | Identificador Op_incremento
;

DECLARACION_STRING ::=
    Cadena Identificador P_coma |
    Cadena Identificador Igual CADENA P_coma |
    Cadena Identificador Igual Nulo P_coma
;

CADENA ::=
      Comillas Comillas 
    | Comillas Identificador Comillas
    | IFARIT_CADENA
;

DECLARACION ::=
    DECLARACION_BOOL |
    DECLARACION_FLOTANTE |
    DECLARACION_ENTERA |
    DECLARACION_STRING |
    DECLARACION_CHAR
;

//READ se encuentra en String
ASIGNACION ::= 
    Op_incremento Identificador P_coma |
    ASIGNACION_ENTERA |
    ASIGNACION_FLOTANTE |
    ASIGNACION_STRING |
    ASIGNACION_BOOL |
    ASIGNACION_CHAR |
    Identificador Igual Nulo P_coma |
    Identificador Corchete_a Numero Corchete_c Igual Nulo P_coma
;

ASIGNACION_BOOL ::=
    Identificador Igual SENTENCIA_BOOLEANA P_coma
    | Identificador Corchete_a Numero Corchete_c Igual SENTENCIA_BOOLEANA P_coma
    | Identificador Corchete_a Corchete_c Igual ARREGLO_BOOL P_coma
;

ASIGNACION_ENTERA ::=
    Identificador Igual EXPRESION_ENTERA P_coma 
    | Identificador Corchete_a Numero:numero Corchete_c Igual EXPRESION_ENTERA P_coma {:System.out.println(numero):}
    | Identificador Corchete_a Corchete_c Igual ARREGLO_ENTERA P_coma
;

ASIGNACION_FLOTANTE ::=
    Identificador Igual EXPRESION_FLOTANTE P_coma 
    | Identificador Corchete_a Numero Corchete_c Igual EXPRESION_FLOTANTE P_coma 
    | Identificador Corchete_a Corchete_c Igual ARREGLO_FLOTANTE P_coma
;

ASIGNACION_STRING ::=
    Identificador Igual CADENA P_coma |
    Identificador Igual Read Parentesis_a Parentesis_c P_coma 
;

ASIGNACION_CHAR ::=
      Identificador Igual VAR_CHAR P_coma
    | Identificador Corchete_a Numero Corchete_c Igual VAR_CHAR P_coma
    | Identificador Corchete_a Corchete_c Igual ARREGLO_CHAR P_coma
;

IFARIT_FLOTANTE ::= 
    Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Op_pregunta VAR_FLOTANTE Op_Sino VAR_FLOTANTE
;

IFARIT_ENTERA ::= 
    Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Op_pregunta VAR_ENTERA Op_Sino VAR_ENTERA
;

IFARIT_CADENA ::= 
    Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Op_pregunta CADENA Op_Sino CADENA
;

IFARIT_BOOL ::= 
    Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Op_pregunta Op_booleano Op_Sino Op_booleano 
;

WRITE ::=
    Write Parentesis_a CADENA Parentesis_c P_coma |
    Write Parentesis_a Identificador Parentesis_c P_coma 
;

IF ::= 
    If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c
;

IF_ELSE ::= 
    IF ELSE
;

ELIF ::=
    Elif Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c |
    ELIF Elif Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c
;

ELSE ::=
    Else Llave_a SENTENCIA Llave_c
;

IF_ELIF_ELSE ::=
    IF |
    IF_ELSE |
    IF ELIF |
    IF ELIF ELSE
;

FOR ::= 
    For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c
;
SENTENCIA_FOR ::=
    Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR
;
DECLARACION_FOR ::= 
    Identificador Op_atribucion Numero |
    Identificador Op_incremento | 
    Op_incremento Identificador
;